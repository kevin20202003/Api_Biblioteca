// <auto-generated />
using Api_Biblioteca.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Api_Biblioteca.Migrations
{
    [DbContext(typeof(AplicationDbContext))]
    partial class AplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Api_Biblioteca.Model.Autor", b =>
                {
                    b.Property<int>("Id_autor")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id_autor"));

                    b.Property<int>("LibroId_libro")
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id_autor");

                    b.HasIndex("LibroId_libro");

                    b.ToTable("Autores");
                });

            modelBuilder.Entity("Api_Biblioteca.Model.Libro", b =>
                {
                    b.Property<int>("Id_libro")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id_libro"));

                    b.Property<string>("titulo")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id_libro");

                    b.HasIndex("titulo")
                        .IsUnique()
                        .HasFilter("[titulo] IS NOT NULL");

                    b.ToTable("Libros");
                });

            modelBuilder.Entity("Api_Biblioteca.Model.Autor", b =>
                {
                    b.HasOne("Api_Biblioteca.Model.Libro", "Libro")
                        .WithMany()
                        .HasForeignKey("LibroId_libro")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Libro");
                });
#pragma warning restore 612, 618
        }
    }
}
